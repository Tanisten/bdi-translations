from flask import Flask, request, jsonify
import os
import requests
from dotenv import load_dotenv
from flask_cors import CORS

# Загрузка переменных окружения
load_dotenv()

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})  # Разрешаем CORS-запросы ко всем маршрутам

@app.route('/')
def home():
    return "Welcome to the Python Interpreter API"

@app.route('/run', methods=['POST'])
def run_code():
    code = request.json.get('code')
    result = subprocess.run(['python', '-c', code], capture_output=True, text=True)
    return jsonify({'output': result.stdout, 'error': result.stderr})

@app.route('/ai-help', methods=['POST'])
def ai_help():
    code = request.json.get('code')
    api_key = os.getenv('GEMINI_API_KEY')  # Загружаем API ключ из .env файла
    headers = {
        'Content-Type': 'application/json',
    }
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": f"Help me write Python code for the following task: {code}"
                    }
                ]
            }
        ]
    }
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"
    
    try:
        response = requests.post(url, json=data, headers=headers)
        response.raise_for_status()  # Проверка на ошибки HTTP
        return jsonify({'ai_response': response.json()})
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")  # Выводим ошибку в консоль
        return jsonify({'error': str(e)}), 500  # Возвращаем ошибку клиенту

if __name__ == '__main__':
    app.run(debug=True)
